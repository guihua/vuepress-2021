import{d as n}from"./app.147292e0.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="javascript-\u4E2D\u56DE\u6587-palindromes-\u5904\u7406" tabindex="-1"><a class="header-anchor" href="#javascript-\u4E2D\u56DE\u6587-palindromes-\u5904\u7406" aria-hidden="true">#</a> JavaScript \u4E2D\u56DE\u6587(Palindromes)\u5904\u7406</h1><p>Palindromes\u79F0\u4E4B\u4E3A\u56DE\u6587\u3002\u5728\u4E2D\u6587\u6587\u5F53\u4E2D\u662F\u6307\u5012\u7740\u5FF5\u548C\u987A\u7740\u5FF5\u90FD\u662F\u76F8\u540C\u7684\uFF0C\u524D\u540E\u5BF9\u79F0\uFF0C\u4F8B\u5982\u201C\u4E0A\u6D77\u81EA\u6765\u6C34\u6765\u81EA\u6D77\u4E0A\u201D\u3002\u5728\u82F1\u6587\u6587\u5F53\u4E2D\u662F\u6307\u6B63\u7740\u770B\u548C\u53CD\u7740\u770B\u90FD\u76F8\u540C\u7684\u5355\u8BCD\uFF0C\u4F8B\u5982\u201Cmadam\u201D\u3002\u800C\u5BF9\u4E8E\u6570\u5B57\uFF0C\u53C8\u79F0\u4E4B\u4E3A\u56DE\u6587\u6570\uFF0C\u662F\u6307\u4E00\u4E2A\u50CF\u201C16461\u201D\u8FD9\u6837\u7684\u5BF9\u79F0\u7684\u6570\uFF0C\u5373\u8FD9\u4E2A\u6570\u7684\u6570\u5B57\u6309\u76F8\u53CD\u7684\u987A\u5E8F\u91CD\u65B0\u6392\u5217\u540E\u5F97\u5230\u7684\u6570\u548C\u539F\u6765\u7684\u6570\u4E00\u6837\u3002</p><p>\u68C0\u8F66 Palindromes \u7684\u65B9\u6CD5\u5F88\u591A\u3002</p><h2 id="\u65B9\u6CD5\u4E00" tabindex="-1"><a class="header-anchor" href="#\u65B9\u6CD5\u4E00" aria-hidden="true">#</a> \u65B9\u6CD5\u4E00</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\W_]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
    <span class="token comment">// \u6216\u8005 var re = /[^A-Za-z0-9]/g;</span>

    <span class="token keyword">var</span> lowRegStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> reverseStr <span class="token operator">=</span> lowRegStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> reverseStr <span class="token operator">===</span> lowRegStr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u8FD9\u4E2A\u65B9\u6848\uFF1A</p><ol><li>\u901A\u8FC7\u6B63\u5219\u8868\u8FBE\u5F0F <code>/[\\W_]/g</code>(\u6216\u8005 <code>/[^A-Za-z0-9]/g</code>)\u5220\u9664\u4E0D\u5FC5\u8981\u7684\u5B57\u7B26</li><li>\u901A\u8FC7 <code>toLowerCase()</code> \u65B9\u6CD5\u5C06\u4F20\u5165\u7684\u5B57\u7B26\u4E32 <code>str</code> \u8F6C\u6362\u4E3A\u5C0F\u5199\u5B57\u6BCD\u3002\u6BD4\u5982 <code>str.toLowerCase()</code>\uFF0C\u5F53 <code>str</code> \u7684\u503C\u4E3A <code>&quot;A man, a plan, a canal. Panama&quot;</code> \u65F6\uFF0C<code>str.toLowerCase()</code> \u5C31\u76F8\u5F53\u4E8E<code>&quot;A man, a plan, a canal. Panama&quot;.toLowerCase()</code>\uFF0C\u5176\u503C\u5C06\u662F <code>&quot;a man, a plan, a canal. panama&quot;</code></li><li>\u901A\u8FC7 <code>replace()</code> \u65B9\u6CD5\u548C\u524D\u9762\u5B9A\u4E49\u597D\u7684\u6B63\u5219\u8868\u8FBE\u5F0F <code>/[\\W_]/g</code> \u5339\u914D\u51FA\u9700\u8981\u7684\u5B57\u7B26\uFF08\u5220\u9664\u4E0D\u5FC5\u8981\u7684\u5B57\u7B26\uFF09\u3002\u6BD4\u5982\u4E0A\u4F8B\u4E2D <code>str.replace(/[\\W_]/g, &#39;&#39;)</code> \u5C31\u76F8\u5F53\u4E8E <code>&quot;a man, a plan, a canal. panama&quot;.replace(/[\\W_]/g, &#39;&#39;)</code>,\u5F97\u5230\u7684\u503C\u5C06\u662F <code>&quot;amanaplanacanalpanama&quot;</code></li><li>\u901A\u8FC7 <code>split()</code> \u65B9\u6CD5\u5C06\u5B57\u7B26\u4E32\u8F6C\u6362\u6210\u6570\u7EC4\u3002\u5982 <code>&quot;amanaplanacanalpanama&quot;.split(&#39;&#39;)</code>\uFF0C\u5F97\u5230\u7684\u503C <code>[&quot;a&quot;, &quot;m&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;p&quot;, &quot;l&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;c&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;l&quot;, &quot;p&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;m&quot;, &quot;a&quot;]</code></li><li>\u4F7F\u7528 <code>reverse()</code> \u65B9\u6CD5\u5C06\u6570\u7EC4\u505A\u4E00\u4E2A\u53CD\u8F6C\u5904\u7406 <code>[&quot;a&quot;, &quot;m&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;p&quot;, &quot;l&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;c&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;l&quot;, &quot;p&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;m&quot;, &quot;a&quot;].reverse</code>\uFF0C\u6B64\u65F6\u5F97\u5230\u4E00\u4E2A\u65B0\u6570\u7EC4 <code>[&quot;a&quot;, &quot;m&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;p&quot;, &quot;l&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;c&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;l&quot;, &quot;p&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;m&quot;, &quot;a&quot;]</code></li><li>\u901A\u8FC7 <code>join()</code> \u65B9\u6CD5\uFF0C\u5C06\u5F97\u5230\u7684\u65B0\u6570\u7EC4\u7684\u6BCF\u4E2A\u6570\u7EC4\u9879\u8FDE\u63A5\u5728\u4E00\u8D77\u53D8\u6210\u4E00\u4E2A\u65B0\u7684\u5B57\u7B26\u4E32,\u5982 <code>[&quot;a&quot;, &quot;m&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;p&quot;, &quot;l&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;c&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;l&quot;, &quot;p&quot;, &quot;a&quot;, &quot;n&quot;, &quot;a&quot;, &quot;m&quot;, &quot;a&quot;].join(&#39;&#39;)</code>\uFF0C\u5176\u503C\u5C06\u53D8\u6210\u4E00\u4E2A\u65B0\u5B57\u7B26\u4E32 <code>&quot;amanaplanacanalpanama&quot;</code></li></ol><h2 id="\u65B9\u6CD5\u4E8C" tabindex="-1"><a class="header-anchor" href="#\u65B9\u6CD5\u4E8C" aria-hidden="true">#</a> \u65B9\u6CD5\u4E8C</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\W_]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> lowRegStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> len <span class="token operator">=</span> lowRegStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> halfLen <span class="token operator">=</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> halfLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lowRegStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> lowRegStr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="\u65B9\u6CD5\u4E09" tabindex="-1"><a class="header-anchor" href="#\u65B9\u6CD5\u4E09" aria-hidden="true">#</a> \u65B9\u6CD5\u4E09</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5220\u9664\u5B57\u7B26\u4E32\u4E2D\u4E0D\u5FC5\u8981\u7684\u5B57\u7B26</span>
    <span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\W_]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>

    <span class="token comment">// \u5C06\u5B57\u7B26\u4E32\u53D8\u6210\u5C0F\u5199\u5B57\u7B26</span>
    <span class="token keyword">var</span> lowRegStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u5982\u679C\u5B57\u7B26\u4E32lowRegStr\u7684length\u957F\u5EA6\u4E3A0\u65F6\uFF0C\u5B57\u7B26\u4E32\u5373\u662Fpalindrome</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lowRegStr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u5982\u679C\u5B57\u7B26\u4E32\u7684\u7B2C\u4E00\u4E2A\u548C\u6700\u540E\u4E00\u4E2A\u5B57\u7B26\u4E0D\u76F8\u540C\uFF0C\u90A3\u4E48\u5B57\u7B26\u4E32\u5C31\u4E0D\u662Fpalindrome</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lowRegStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> lowRegStr<span class="token punctuation">[</span>lowRegStr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">palindrome</span><span class="token punctuation">(</span>lowRegStr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> lowRegStr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="\u65B9\u6CD5\u56DB" tabindex="-1"><a class="header-anchor" href="#\u65B9\u6CD5\u56DB" aria-hidden="true">#</a> \u65B9\u6CD5\u56DB</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5220\u9664\u5B57\u7B26\u4E32\u4E2D\u4E0D\u5FC5\u8981\u7684\u5B57\u7B26</span>
    <span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\W_]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>

    <span class="token comment">// \u5C06\u5B57\u7B26\u4E32\u53D8\u6210\u5C0F\u5199\u5B57\u7B26</span>
    <span class="token keyword">var</span> lowRegStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// \u68C0\u67E5\u5B57\u7B26\u4E32\u662F\u4E0D\u662F\u7A7A\u5B57\u7B26\u4E32</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lowRegStr <span class="token operator">===</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u68C0\u67E5\u5B57\u7B26\u4E32\u957F\u5EA6\u662F\u5355\u6570\u8FD8\u662F\u53CC\u6570</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lowRegStr<span class="token punctuation">.</span>length <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count <span class="token operator">=</span> lowRegStr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5982\u679C\u5B57\u7B26\u4E32\u957F\u5EA6\u503C\u7B49\u4E8E1\uFF0C\u90A3\u4E48\u5B83\u662Fpalindrome</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lowRegStr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5982\u679C\u5B57\u7B26\u4E32\u957F\u5EA6\u662F\u5947\u6570\uFF0C\u5FFD\u7565\u5B57\u7B26\u4E32\u4E2D\u6700\u4E2D\u95F4\u7684\u5B57\u7B26</span>
            count <span class="token operator">=</span> <span class="token punctuation">(</span>lowRegStr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u6DFB\u52A0for\u5FAA\u73AF\uFF0C\u904D\u5386\u5B57\u7B26\u4E32\uFF0C\u68C0\u6D4B\u5B57\u7B26\u4E32\u7B2C\u4E00\u4E2A\u5B57\u7B26\u548C\u6700\u540E\u4E00\u4E2A\u5B57\u7B26\uFF0C\u7136\u540E\u4F9D\u6B21\u7C7B\u63A8</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5982\u679C\u4E0D\u5339\u914D\u5B57\u7B26\u4E32\u5C31\u4E0D\u662F\u4E00\u4E2Apalindrome</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lowRegStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> lowRegStr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div>`,13);function t(o,e){return p}var l=s(a,[["render",t]]);export{l as default};
