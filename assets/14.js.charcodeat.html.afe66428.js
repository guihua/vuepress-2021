import{d as n}from"./app.147292e0.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="javascript-charcodeat-\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#javascript-charcodeat-\u65B9\u6CD5" aria-hidden="true">#</a> JavaScript charCodeAt() \u65B9\u6CD5</h1><p><code>charCodeAt()</code> \u65B9\u6CD5\u53EF\u8FD4\u56DE\u6307\u5B9A\u4F4D\u7F6E\u7684\u5B57\u7B26\u7684 Unicode \u7F16\u7801\uFF0C\u8FD9\u4E2A\u8FD4\u56DE\u503C\u662F <code>0 - 65535</code> \u4E4B\u95F4\u7684\u6574\u6570\u3002</p><p>\u8BED\u6CD5\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>stringObject<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>\u5176\u4E2D\uFF0C<code>index</code> \u8868\u793A\u5B57\u7B26\u4E32\u4E2D\u67D0\u4E2A\u4F4D\u7F6E\u7684\u6570\u5B57\uFF0C\u5373\u5B57\u7B26\u5728\u5B57\u7B26\u4E32\u4E2D\u7684\u4E0B\u6807\uFF0C\u5FC5\u9009\u3002</p><blockquote><p>\u5B57\u7B26\u4E32\u4E2D\u7B2C\u4E00\u4E2A\u5B57\u7B26\u7684\u4E0B\u6807\u662F <code>0</code>\u3002\u5982\u679C <code>index</code> \u662F\u8D1F\u6570\uFF0C\u6216\u5927\u4E8E\u7B49\u4E8E\u5B57\u7B26\u4E32\u7684\u957F\u5EA6\uFF0C\u5219 <code>charCodeAt()</code> \u8FD4\u56DE <code>NaN</code>\u3002</p></blockquote><p>\u5E38\u7528\u5B57\u7B26\u4E32\u957F\u5EA6\u5224\u65AD\u65B9\u6CD5 <code>getLen</code> \u5B9E\u73B0\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">getLen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">!==</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            len <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            len <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>\u9057\u7559\u95EE\u9898\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">94</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>`,10);function e(t,c){return p}var r=s(a,[["render",e]]);export{r as default};
